name: Java CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Build with Maven
        run: mvn clean package

      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: java-app
          path: build/libs/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: java-app

      - name: Copy artifact to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          echo "${{ secrets.EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem build/libs/*.jar $EC2_USER@$EC2_HOST:/home/$EC2_USER/

      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          ssh -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            # Commands to stop the current application, if any, and start the new one
            # For example, if it's a Spring Boot application:
            pkill -f 'java -jar' || true
            nohup java -jar /home/$EC2_USER/*.jar > app.log 2>&1 &
          EOF
